#include <stdio.h>
#include <stdlib.h>
 
// // Function to compare for sorting (ascending order)
// int compareAsc(const void *a, const void *b) {
//     return (*(int *)a - *(int *)b);
// }

void compareAsc(int *selected,int n){
      for(int i = 0; i<n;i++){
                for(int j = i+1;j<n;j++){
                    if(selected[i] > selected[j]){
                        int tmp = selected[i];
                        selected[i] = selected[j];
                        selected[j] = tmp;
                    }
                    
                }
        }
}
void compareDesc(int *selected,int n){
      for(int i = 0; i<n;i++){
                for(int j = i+1;j<n;j++){
                    if(selected[i] > selected[j]){
                        int tmp = selected[i];
                        selected[i] = selected[j];
                        selected[j] = tmp;
                    }
                    
                }
        }
}





 
// // Function to compare for sorting (descending order)
// int compareDesc(const void *a, const void *b) {
//     return (*(int *)b - *(int *)a);
// }

void verticalFold(int n, int matrix[][10]) {
    int mid = n / 2;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < mid; j++) {
            matrix[i][j] += matrix[i][n - 1 - j];
            matrix[i][n - 1 - j] = 0;
        }
    }
}
 

void horizontalFold(int n, int matrix[][10]) {
    int mid = n / 2;
    for (int i = 0; i < mid; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] += matrix[n - 1 - i][j];
            matrix[n - 1 - i][j] = 0;
        }
    }
}

 

void constructMatrix(int n, int arr1[], int arr2[], int matrix[][10]) {
    int index1 = 1, index2 = 1;  // Start after size element
 
    for (int i = 0; i < n; i++) {
        int temp1[n], temp2[n];
 
        // Extract partition elements
        for (int j = 0; j < n; j++) {
            temp1[j] = arr1[index1++];
            temp2[j] = arr2[index2++];
        }
        
        compareAsc(temp1, n);
        compareDesc(temp2,n);
        
        for (int j = 0; j < n; j++) {
            matrix[i][j] = temp1[j] + temp2[j];
        }
    }
    
    verticalFold(n, matrix);
    horizontalFold(n, matrix);
}
 

 

void printMatrix(int n, int matrix[][10]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}
 
// Main function
int main() {
    int arr1[] = {16, 8, 11, 7, 4, 3, 10, 2, 5, 6, 21, 16, 9, 3, 22, 18, 7};
    int arr2[] = {16, 9, 4, 6, 9, 2, 1, 8, 13, 1, 5, 11, 17, 4, 5, 28, 26};
    int n = 4; 
 
    int matrix[10][10] = {0}; 
 
    constructMatrix(n, arr1, arr2, matrix);
    // verticalFold(n, matrix);
    // horizontalFold(n, matrix);
 
    printf("Final Matrix:\n");
    printMatrix(n, matrix);
 
    return 0;
}
 
