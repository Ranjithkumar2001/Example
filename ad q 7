#include <stdio.h>
#include <stdlib.h>
#include <math.h>
 
// Function to compare integers for qsort (descending order)
int compare(const void *a, const void *b) {
    return (*(int *)b - *(int *)a);
}
 
// Function to process AdminDroid Arrays and generate the final 2D array
void processAdminDroidArrays(int arr1[], int arr2[], int size) {
    int n = (int)sqrt(size); // Determine n from given size (n*n + 1)
    
    
    int output[n][n]; // Resultant 2D array
    int partitionSize = n;
 
    for (int i = 0; i < n; i++) {
        int tempArr[2 * partitionSize]; // Combined partition array
        int k = 0;
 
        // First add elements from arr1
        for (int j = 0; j < partitionSize; j++) {
            tempArr[k++] = arr1[1 + i * partitionSize + j];
        }
 
        // Then add elements from arr2
        for (int j = 0; j < partitionSize; j++) {
            tempArr[k++] = arr2[1 + i * partitionSize + j];
        }
 
        // Calculate average
        double sum = 0;
        for (int j = 0; j < k; j++) {
            sum += tempArr[j];
        }
        double avg = sum / k;
 
        // Collect elements greater than average
        int selected[n], selectedCount = 0;
        for (int j = 0; j < k; j++) {
            if (tempArr[j] > avg) {
                selected[selectedCount++] = tempArr[j];
            }
        }
 
        // If not enough elements > avg, pick the largest ones
        if (selectedCount < n) {
            qsort(tempArr, k, sizeof(int), compare); // Sort in descending order
            for (int j = 0; j < n; j++) {
                selected[j] = tempArr[j];
            }
        }
 
        // Store in output
        for (int j = 0; j < n; j++) {
            output[i][j] = selected[j];
        }
    }
 
    // Print the output 2D array
    printf("Output 2D Array:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", output[i][j]);
        }
        printf("\n");
    }
}
 
int main() {
    int arr1[] = {9, 8, 11, 7, 4, 3, 10, 2, 7, 6};
    int arr2[] = {9, 4, 6, 9, 2, 1, 8, 13, 1, 5};
 
    int size =arr1[0];
 
    processAdminDroidArrays(arr1, arr2, size);
 
    return 0;
}
